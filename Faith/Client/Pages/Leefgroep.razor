@page "/leefgroep"
@using Faith.Shared
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject Microsoft.AspNetCore.Components.NavigationManager UriHelper
@attribute [Authorize]
<PageTitle>Uw leefgroep</PageTitle>

<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(e => ToggleOverlay(true))">Voeg een jongere toe</MudButton>

    <MudOverlay Visible="isVisible" DarkBackground="true">
        <MudGrid>
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudTextField T="string" Label="Voornaam" Required="true" RequiredError="Use is required!"/>
                    <MudTextField T="string" Label="Achternaam" Required="true" RequiredError="Use is required!"/>
                    <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                    <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                                  InputType="InputType.Password"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                  RequiredError="Password is required!"/>
                    <MudTextField T="string"
                                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                  Validation="@(new Func<string, string>(PasswordMatch))"/>
                        <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                            <MudRadio Option="@("Man")">Man</MudRadio>
                            <MudRadio Option="@("Vrouw")">Vrouw</MudRadio>
                            <MudRadio Option="@("Andere")">Andere</MudRadio>
                        </MudRadioGroup>
            </MudForm>   
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary"  OnClick="@(e => ToggleOverlay(false))" Class="mt-1">Annuleren</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
        </MudPaper>
    </MudItem>
</MudGrid>
</MudOverlay>

<MudTable Items="@gebruikers" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>nr.</MudTh>
        <MudTh>Voornaam</MudTh>
        <MudTh>Achternaam</MudTh>
        <MudTh>Geboortedatum</MudTh>
        <MudTh>Acties</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">1</MudTd>
        <MudTd DataLabel="Voornaam">@context.Voornaam</MudTd>
        <MudTd DataLabel="Achternaam">@context.Achternaam</MudTd>
        <MudTd DataLabel="Geboortedatum">@context.Geboortedatum</MudTd>
        <MudTd DataLabel="Geslacht">@context.Geslacht</MudTd>
        <MudFab @onclick="@(()=>Delete(1))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
    </RowTemplate>
</MudTable>
@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    private bool isVisible;
    private bool _hidePosition;
    private bool _loading;
    private IEnumerable<Gebruiker> gebruikers= new List<Gebruiker> {
        new Gebruiker { Voornaam = "Jaguar XJ220", Achternaam="test", Geboortedatum = new DateTime(), Rol= Rol.Jongere },
        new Gebruiker { Voornaam = "Jaguar XJ220", Achternaam="test", Geboortedatum = new DateTime(), Rol= Rol.Jongere },
        new Gebruiker { Voornaam = "Jaguar XJ220", Achternaam="test", Geboortedatum = new DateTime(), Rol= Rol.Jongere },
        new Gebruiker { Voornaam = "Jaguar XJ220", Achternaam="test", Geboortedatum = new DateTime(), Rol= Rol.Jongere }
    };
    public void ToggleOverlay(bool value)
    {
        isVisible = value;
    }
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }
    private void Delete(int id)
    {
        
    }
}
